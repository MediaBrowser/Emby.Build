#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin
TAG_NAME="TAG_NAME"
IMG_NAME="IMG_NAME"
APP_NAME="emby-server"
APP_USER=${APP_USER:-$USER}
APP_REPO=${APP_REPO:-emby}
APP_CONFIG=${APP_CONFIG:-"/home/${APP_USER}/.${APP_NAME}"}

( id -Gn | grep -q docker ) || [ $EUID == 0 ] || SUDO=sudo

if [ ${APP_USER} != "appuser" ]; then
  APP_UID=$(getent passwd $APP_USER | awk -F":" '{print $3}')
  APP_GID=$(getent passwd $APP_USER | awk -F":" '{print $4}')
else
  APP_UID=$(id -u)
  APP_GID=$(id -g)
fi

if [ ${APP_USER} == "nobody" ]; then
  APP_USER="appuser"
fi

list_options() {
  echo ""
  echo "Launch ${APP_NAME} using:"
  echo "  ${APP_NAME}                          - Launch ${APP_NAME}"
  echo "  ${APP_NAME} bash                     - Launch bash shell in ${APP_NAME} container"
  echo ""
  exit 1
}

cleanup_stopped_instances() {
  echo "Cleaning up stopped ${APP_NAME} instances..."
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect -f {{.Config.Image}} ${c})
    if [[ ${image} == "${APP_REPO}/${IMG_NAME}:${TAG_NAME}" ]]; then
      running=$(${SUDO} docker inspect -f {{.State.Running}} ${c})
      if [[ ${running} != true ]]; then
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=APP_UID=${APP_UID}"
  ENV_VARS+=" --env=APP_GID=${APP_GID}"
  ENV_VARS+=" --env=APP_USER=${APP_USER}"
  if [ -f /etc/timezone ]; then
    ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  else
    [ ! -z "${TIMEZONE}" ] && ENV_VARS+=" --env=TZ=${TIMEZONE}"
  fi
}

prepare_docker_volume_parameters() {
  if [ ! -d "${APP_CONFIG}" ]; then
    mkdir -p ${APP_CONFIG}
  fi

  CURR_SID=$(stat -c"%u:%g" ${APP_CONFIG})
  if [ "$CURR_SID" != "$APP_UID:$APP_GID" ] ; then
    chown -R $APP_UID:$APP_GID ${APP_CONFIG}
  fi

  # prepare local filesystems
  VOLUMES+=" --volume=${APP_CONFIG}:/config"
}

prepare_user_volume_parameters() {
  # Ensure emby data directory exist.
  if [ ! -d "${APP_CONFIG}" ]; then
    echo "Error, Emby data directory: ${APP_CONFIG} does not exist."
    exit 1
  fi

  if [ ! -e "${APP_CONFIG}/.embydockervolumes" ]; then
    declare -a user_volumes
    echo "We could not find existing settings for your media files."
    echo "Pleae enter the parent directories of your media files, one entry per line."
    echo "Enter \"done\" when finished"
    while read mediapath; do
      if [ "$mediapath" == "done" ]; then
        break
      fi
      if [ ! -d "$mediapath" ]; then
        echo "Sorry, $mediapath is not a valid path."
      else
        user_volumes+=("$mediapath")
      fi
    done < /dev/stdin

    for user_volume in "${user_volumes[@]}"; do
      echo "${user_volume}" >> "${APP_CONFIG}/.embydockervolumes"
    done
  fi

  # setup user volumes
  while read user_volume; do
    VOLUMES+=" --volume=${user_volume}:${user_volume}"
  done < "${APP_CONFIG}/.embydockervolumes"
}

prog=$(basename $0)
if [[ ${prog} == "${APP_NAME}" ]]; then
  [ "${1}" == "bash" ] && \
    prog=bash && \
    shift
  [[ "${1}" == "help" ]] && list_options && exit 1
fi

cleanup_stopped_instances
prepare_docker_env_parameters
prepare_docker_volume_parameters
prepare_user_volume_parameters

echo "Starting ${prog}..."
if [ "${prog}" != "${APP_NAME}" ]; then
  ${SUDO} docker run -it \
    --net=host \
    ${ENV_VARS} \
    ${VOLUMES} \
    --name=${APP_NAME} \
    ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${prog} $@
else
  ${SUDO} docker run -d \
    --net=host \
    ${ENV_VARS} \
    ${VOLUMES} \
    --name=${APP_NAME} \
    ${APP_REPO}/${IMG_NAME}:${TAG_NAME} >/dev/null
fi
