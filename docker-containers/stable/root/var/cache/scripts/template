#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin
TAG_NAME="TAG_NAME"
IMG_NAME="IMG_NAME"
APP_NAME="emby-server"
APP_USER=${APP_USER:-$USER}
APP_REPO=${APP_REPO:-emby}
APP_CONFIG=${APP_CONFIG:-"/home/${APP_USER}/.${APP_NAME}"}
EDGE=${EDGE:-0}
UMASK=${UMASK:-002}
RUN_MODE="-d"

( id -Gn | grep -q docker ) || [[ $EUID == 0 ]] || SUDO=sudo

if [[ "${APP_USER}" != "appuser" ]]; then
  APP_UID=$(getent passwd $APP_USER | awk -F":" '{print $3}')
  APP_GID=$(getent passwd $APP_USER | awk -F":" '{print $4}')
else
  APP_UID=$(id -u)
  APP_GID=$(id -g)
fi

if [[ ${APP_USER} == "nobody" ]]; then
  APP_USER="appuser"
fi

list_options() {
  echo ""
  echo "Launch ${APP_NAME} using:"
  echo "  ${APP_NAME}                          - Launch ${APP_NAME}"
  echo "  ${APP_NAME} bash                     - Launch bash shell in ${APP_NAME} container"
  echo ""
  exit 1
}

cleanup_stopped_instances() {
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect --format="{{.Config.Image}}" ${c})
    if [[ ${image} == "${APP_REPO}/${IMG_NAME}:${TAG_NAME}" ]]; then
      running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${c})
      if [[ ${running} != true ]]; then
        echo "Cleaning up stopped ${APP_NAME} instances..."
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
  running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${APP_NAME} 2> /dev/null)
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=APP_UID=${APP_UID}"
  ENV_VARS+=" --env=APP_GID=${APP_GID}"
  ENV_VARS+=" --env=APP_USER=${APP_USER}"
  ENV_VARS+=" --env=EDGE=${EDGE}"
  ENV_VARS+=" --env=UMASK=${UMASK}"
  if [[ -f /etc/timezone ]]; then
    ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  else
    [[ ! -z "${TIMEZONE}" ]] && ENV_VARS+=" --env=TZ=${TIMEZONE}"
  fi
}

prepare_docker_volume_parameters() {
  if [[ ! -d "${APP_CONFIG}" ]]; then
    mkdir -p ${APP_CONFIG}
  fi

  CURR_SID=$(stat -c"%u:%g" ${APP_CONFIG})
  if [ "$CURR_SID" != "$APP_UID:$APP_GID" ] ; then
    chown -R $APP_UID:$APP_GID ${APP_CONFIG}
  fi

  # prepare local filesystems
  VOLUMES+=" --volume=${APP_CONFIG}:/config"
}

prepare_user_volume_parameters() {
  # Ensure app config directory exist.
  if [[ ! -d "${APP_CONFIG}" ]]; then
    echo "Error, ${APP_NAME} data directory: ${APP_CONFIG} does not exist."
    exit 1
  fi

  if [[ -f "${APP_CONFIG}/.embydockervolumes" ]]; then
    mv "${APP_CONFIG}/.embydockervolumes" "${APP_CONFIG}/.${APP_NAME}.volumes"
  fi

  if [[ ! -e "${APP_CONFIG}/.${APP_NAME}.volumes" ]]; then
    declare -a user_volumes
    echo "No existing user volumes for: ${APP_NAME}."
    echo "Pleae enter full paths you want accessible from within the container"
    echo "Enter one entry per line."
    echo "Enter \"done\" or "Ctrl+D" when finished"
    while read hostpath; do
      if [[ "$hostpath" == "done" ]]; then
        break
      fi
      if [[ ! -d "$hostpath" ]]; then
        echo "Sorry, $hostpath is not a valid path."
      else
        user_volumes+=("$hostpath")
      fi
    done < /dev/stdin

    for user_volume in "${user_volumes[@]}"; do
      echo "${user_volume}" >> "${APP_CONFIG}/.${APP_NAME}.volumes"
    done
  fi

  # setup user volumes
  while read user_volume; do
    VOLUMES+=" --volume=${user_volume}:${user_volume}"
  done < "${APP_CONFIG}/.${APP_NAME}.volumes"
}

cleanup_stopped_instances
prepare_docker_env_parameters
prepare_docker_volume_parameters
prepare_user_volume_parameters

if [[ "${running}" != "true" ]]; then
  case "$1" in
    "")
      ;;
    "bash")
      RUN_MODE="-it" && prog="bash" && shift
      ;;
    "service")
      RUN_MODE="" && shift
      ;;
    "help")
      list_options && exit 1
      ;;
    *)
      echo "${APP_NAME} not started yet."
      echo "Ignoring all arguments!"
      set --
      ;;
  esac

  if [[ -z "${prog}" ]]; then
    msg="Starting $APP_NAME"
  else
    msg="Starting ${prog} in ${APP_NAME} docker"
  fi

  echo "${msg}..."
  ${SUDO} docker run \
    --log-opt max-size=2m \
    --log-opt max-file=2 \
    ${RUN_MODE} \
    ${ENV_VARS} \
    ${VOLUMES} \
    --name=${APP_NAME} \
    ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${prog} $@
else
  case "$1" in
    "update")
      docker exec -it ${APP_NAME} update
      ;;
    "stop")
      docker stop ${APP_NAME}
      ;;
    "status")
      echo "${APP_NAME} is running."
      echo "UpTime: $(ps -p $(pgrep -u ${APP_UID} -f mono-sgen) -o etime=)"
      ;;
    "logs")
      docker logs ${APP_NAME}
      ;;
    "console")
      docker exec -it ${APP_NAME} bash
      ;;
    *)
      echo "Already running."
      ;;
  esac
  exit 0
fi
